{"pages":[{"title":"About","date":"2017-03-25T02:45:36.073Z","path":"about/index.html","text":""},{"title":"Categories","date":"2017-03-25T02:45:36.073Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2017-03-25T02:45:36.073Z","path":"tags/index.html","text":""}],"posts":[{"title":"gulp-imagemin 使用与参数设置","date":"2017-02-03T05:50:52.000Z","path":"wiki/技术开发/前端/gulp-imagemin-使用与参数设置/","text":"使用版本 gulp : v3.9.1 gulp-imagemin : v3.1.1 简介gulp-imagemin 是配合 gulp 用作压缩图片文件的工具（包括PNG、JPEG、GIF和SVG图片）。 gulp-imagemin 更新 v3.0.0 版本后，用法与之前版本有所区别。 最近我一开始使用的时候就在网上搜索，看到很多博客都讲得一样，于是随便复制了一段代码拿来用。但是实际测试发现，这段代码里设置的参数并没有起作用，比如不管怎样设置压缩质量，出来的结果都一样。于是开始调试，通过阅读源码和官方文档后，我发现目前国内网上关于 gulp-imagemin 的代码大部分都是错的，并且明显看得出是相互抄袭复制的。或者也不能说是错了——没有注明版本，原来的代码用在目前的版本（v3.1.1）上就是错的。 我摘抄了一则 gulp-imagemin 网上常见的错误代码 如下：（注意是对 v3.0.0 及以上版本的错误代码，对 v2.4.0 版本可能正确。） 1234567891011121314// 只适用于gulp-imagemin 2.4.0 或以下版本var gulp = require('gulp'), imagemin = require('gulp-imagemin'); gulp.task('testImagemin', function () &#123; gulp.src('src/img/*.&#123;png,jpg,gif,ico&#125;') .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('dist/img'));&#125;); 上段代码出处：gulp教程之gulp-imagemin | 一点 且不说 progressive: true 的意思应该是“转为渐进式图片”，这段代码在 gulp-imagemin v3.0.0 之后就不正确了，主要体现在 imagemin(option) 的参数设置。 目前网上没有找到几个 3.0.0 之后版本的示例代码，于是我自己去查看官方 API 说明，这里摘抄一段如下： sindresorhus committed on 12 Aug 2016 APIComes bundled with the following lossless optimizers: gifsicle — Compress GIF images jpegtran — Compress JPEG images optipng — Compress PNG images svgo — Compress SVG images These are bundled for convenience and most will not need anything else. imagemin([plugins], [options])Unsupported files are ignored. pluginsType: ArrayDefault: [imagemin.gifsicle(), imagemin.jpegtran(), imagemin.optipng(), imagemin.svgo()] Plugins to use. This will overwrite the default plugins. Note that the default plugins comes with good defaults and should be sufficient in most cases. See the individual plugins for supported options. optionsType: Object verboseType: booleanDefault: false Output more detailed information. 可以看到 options 项只有一个项 verbose，用于输出详细信息，而不是像上面那段代码的 optimizationLevel interlaced 等项。 在四个默认插件的 API 文档中又能进一步找到参数说明。 根据官方 API 文档，我这里给出我的示例代码如下： 1234567891011121314// gulp-imagemin v3.0.0 及以上版本const gulp = require('gulp');const imagemin = require('gulp-imagemin');gulp.task('minify-imgs', function () &#123; return gulp.src('./public/images/**/*.&#123;png,jpg,gif,svg&#125;') .pipe(imagemin([ imagemin.gifsicle(&#123;interlaced: true&#125;), imagemin.jpegtran(&#123;progressive: true&#125;), imagemin.optipng(), imagemin.svgo() ], &#123;verbose: false&#125; )) .pipe(gulp.dest('./public/images'))&#125;); 以上代码仍使用四个默认 imagemin 插件，设置将 gif 转为交错式，将 jpeg 转为渐进式，png 与 svg 使用默认设置，不输出详细信息。 所以用某一个工具或者模块之前，应该先自己阅读一遍官方文档。 我所了解的现在人们一般学习过程是，先看博客里的入门教程，然后直接写代码，学过了入门级往深一点走，才知道遇到问题会去查官方文档。我想说，官方文档有时候确实难啃，但是如果一开始我们就看了官方文档，后面会不会少走点弯路呢？ 参考资料 gulp教程之gulp-imagemin gulp-imagemin图片压缩—-gulp系列 gulp-imagemin | npmjs sindresorhus/gulp-imagemin | GitHub imagemin/imagemin-jpegtran | GitHub","tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://wiki.rootcent.me/tags/Nodejs/"},{"name":"gulp","slug":"gulp","permalink":"http://wiki.rootcent.me/tags/gulp/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://wiki.rootcent.me/categories/技术开发/"},{"name":"前端","slug":"技术开发/前端","permalink":"http://wiki.rootcent.me/categories/技术开发/前端/"}]},{"title":"Welcome Zthxxx's Wiki Site","date":"2017-01-21T17:55:57.000Z","path":"wiki/index/","text":"这是 zthxxx 的个人 Wiki 站点，主要记录一些自己总结的只言片语的零散知识点。 我一直觉得 知识不能碎片化，要结构化，于是希望寻找一种优雅的方式来管理我的知识。 先后了解或尝试过 OneNote、Evernote、Blog、Wiki 等方式，总结了一套觉得比较合理的知识获取吸收管理流程： 通过网页、RSS、微信等网络渠道作为知识获取来源。 通过笔记系统（手写笔记、OneNote、Evernote）初步筛选有价值有针对性的信息，收藏信息，分类整理，做读后要点笔记记录。 自己平时突然想到或总结的一两句话，或很零碎的点子、灵感，初步消化的内容，则用 Wiki 记录。 最后当 Wiki 在某版块有一定量后，将这方面笔记和 Wiki 中的内容重读，整理和提炼，二次消化精炼再加上自己的感悟和理解，写成文章发表在 博客 上。 在使用中，笔记系统 主大块信息的分类和整理，Wiki 主零碎知识的积累，而 博客 只在于 精。 Wiki 中某一版块刚建时，可能只有很少内容或者就一句话，但是通过这种使用流程，日积月累，这方面的事物接触得多了，零散的知识也就多了，那么 Wiki 中这个版块记录的内容也就会变多了，也就是通过积累，把原本大量碎片化的知识结构化整理起来了。 博客的目的是 分享和展示，分享自己的知识，展示自己的水平，需要放拿得出手的东西，因此不适合放碎片化的只言片语，更适合放 一个系列 的总结或者教程等，是一个十分成体系的知识平台。 当我尝试部署一个自己的 Wiki 系统时，又开始纠结于选择哪个 Wiki 系统。参考网上博客，实际部署和对比比较了几个时下流行的 Wiki 系统：MediaWiki, DokuWiki, MDwiki, TiddlyWiki, wiz, vimwiki, Simiki, Wikitten 等等。都不如人意，有些是部署麻烦复杂，有些是界面太丑，有些不能分级，有些分级不能展开，有些不能搜索，还有的甚至不是用的 Markdown 。。。 根据这些不算满意的使用体验，我总结整理了一下自己对于 个人 Wiki 的一些需求。 界面简洁美观，排版字体友好 支持多级分类 方便修改和更新内容 部署简单 分类目录可展开和收缩 展开分类时可查看该分类下所有文章 / 词条的标题 每篇文章 / 词条能添加多个分类 / 标签 Wiki 可支持引用内部链接 使用 Markdown 书写文章 / 词条 支持全文搜索（可搜索内容和标题） 在之前的使用中，Wikiteen 是最接近我需求的，但是仍然有一些条件不满足，比如部署和搜索。但是我个人比较喜欢 Wikitten 的样式。 于是最终我选择了仿照 Wikitten 的样式自己写这个基于 Hexo 的 Wiki 主题 hexo-theme-Wikitten，作为自己用的一套 Wiki 系统，基本实现了上述的需求。现在暂时自己用着，当然这个初步功能还很简单，后续也有一堆 Bug 和 TODO List 需要维护，欢迎有兴趣的提提 PR。","tags":[],"categories":[]}]}